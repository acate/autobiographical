{
    "collab_server" : "",
    "contents" : "# color_survey_DRAFT.R\n# 2019-04-19 adc\n# Analyzes csv files submitted by students for color survey\n\n# This here script lives in .../color_survey/code/\n# csv files live in .../color_survey/submissions/\n\nlibrary(ggplot2)\nlibrary(grid)\nlibrary(gridExtra) # for grid.arrange, etc.\nlibrary(RColorBrewer)\nlibrary(Hmisc) # for rcorr, which gives p-values\nlibrary(ez) # Only for code that might be useful for something else\n\n\n\n################\n# Directories\n################\n\nplotDir <- \"../plots/\"\n\n\n##################\n# Load data\n##################\n\n# Create large list with one data frame per list item\ndataFiles <- lapply(Sys.glob(\"../submissions/*.csv\"), read.csv)\n\n\n# Number of individuals who completed survey\nnIDs <- length(dataFiles)\n\n\n# Loop through dataFiles\n# Goals are\n#   1) Add columns to data frames that might be missing some\n#   2) Add column with subject ID number\n#   3) Concatenate all df's into one big one\n\n# Define list of df columns that should be there after reading in csv files\ncsvCols <- c(\n  \"Memory\",\n  \"AgeRangeLowEnd\",\n  \"Misery.1..Pleasure.7.\",\n  \"NoArousal.1..Arousal.7.\",\n  \"Contexts\",\n  \"Episodes\",\n  \"Feelings\",\n  \"People\",\n  \"Places\",\n  \"Things\",\n  \"Times\",\n  \"otherDetails\",\n  \"YourGender\",\n  \"YourAge\",\n  \"X..AnswerOnce\"\n)\n\n\n# # HAND FIX one person's data frame after initial inspection using for loop below\n# # df in list position 40 has \"Name\" column named \"X\" instead\n# colnames(dataFiles[[40]]) <- csvCols\n\n\ndfCols <- c(\n  \"MEMORY\",\n  \"AGE\",\n  \"PLEASURE\",\n  \"AROUSAL\",\n  \"CONTEXTS\",\n  \"EPISODES\",\n  \"FEELINGS\",\n  \"PEOPLE\",\n  \"PLACES\",\n  \"THINGS\",\n  \"TIMES\",\n  \"DETAILS\",\n  \"GENDER\",\n  \"YOURAGE\",\n  \"ID\"\n)\n\ndf <- data.frame(matrix(ncol = length(dfCols), nrow = 0))\ncolnames(df) <- dfCols\n\nfor (i in 1:nIDs) {\n\n  # # Find any missing columsn\n  # colDiff <- setdiff(csvCols,colnames(dataFiles[[i]]))\n  #\n  # # Append missing columns; ASSUMES they are all at end\n  # if (length(colDiff) > 0) {\n  #   for (j in length(colDiff)) {\n  #     dataFiles[[i]] <- cbind(dataFiles[[i]],NA)\n  #     colnames(dataFiles[[i]])[length(colnames(dataFiles[[i]]))] <- colDiff[j]\n  #   }\n  # }\n\n  # Chop off final column (doesn't hold any data)\n  dataFiles[[i]][,15] <- NULL\n\n  # Fill in rows with gender (only first row originally has value)\n  dataFiles[[i]][,13] <- dataFiles[[i]][1,13]\n\n  # Fill in rows with \"YourAge\" (only first row originally has value)\n  dataFiles[[i]][,14] <- dataFiles[[i]][1,14]\n\n  # Add id numbers; just use loop iteration number\n  dataFiles[[i]] <- cbind(dataFiles[[i]],i)\n\n  # Fix column names, include name for the new ID column\n  colnames(dataFiles[[i]]) <- dfCols\n\n  df <- rbind(df,dataFiles[[i]])\n\n}\n\ndf <- df[is.na(df$AGE)==FALSE,]\n\ndf$ID <- factor(df$ID)\n\n\n\n######################################\n# Limit data to subset of age levels\n######################################\n\n# only a few responses for AGE == 22, so drop\n#   also relatively few for 2, 4\n\ndf <- df[!df$AGE %in% c(2,4,22),]\n\n#######################################\n# Remove possible outlier participant\n#######################################\n\ndf <- df[df$ID != 2,]\n\n\ndf <- droplevels(df)\n\n\n\n\n\n########################\n# Make a new variable\n########################\n\n# Total number of elements of all 8 kinds\ndf$ELEMENTS <- rowSums(df[,5:12],na.rm=TRUE)\n\n\n\n#########################\n# Attach main data frame\n#########################\n\nattach(df)\n\n\n\n#####################\n#####################\n# PLOTS\n#####################\n#####################\n\n# # Capture local environment (variables) to pass to ggplot2 functions\n# .e <- environment()\n\n\n######################\n# Histograms of data\n######################\n\n\n\n####### NOTE!!!!!!!!!!\n# Need to type value of nIDs in geom_histogram below\n# Anthony couldn't get it working to pass local var. to geom_hist(aes())\n\n# Histogram of number of memories by age\npAgeHist <- ggplot(data=df,aes(AGE)) +\n  geom_histogram(aes(y=..count../46),bins=length(unique(AGE))\n    ) +\n  labs(\n    y = \"Average count per individual\",\n    title = \"Unique autobiographical memories\"\n    )\n\n\n#########################################\nsvg(\n  paste0(plotDir,'histogram_AGE.svg')\n)\nprint(pAgeHist)\ndev.off()\n#########################################\n\n\n# pAgeFreqPoly <- ggplot(data=df,aes(AGE)) + geom_freqpoly(bins=length(unique(AGE)))\n\n\n\n\n\n\n##################################\n# TYPE means by AGE\n#   and interactions with GENDER\n##################################\n\n\ndfLong <- reshape(df,\n                  varying = c(\"PLEASURE\",\"AROUSAL\",\"CONTEXTS\",\"EPISODES\",\"FEELINGS\",\"PEOPLE\",\"PLACES\",\"THINGS\",\"TIMES\",\"DETAILS\",\"ELEMENTS\"),\n                  v.names = \"RATING\",\n                  timevar = \"TYPE\",\n                  times = c(\"pleasure\",\"arousal\",\"contexts\",\"episodes\",\"feelings\",\"people\",\"places\",\"things\",\"times\",\"details\",\"elements\"),\n                  direction = \"long\")\ndfLong$TYPE <- factor(dfLong$TYPE)\n\ndfTypeMeans <- aggregate(RATING ~ AGE*TYPE, data=dfLong, FUN = \"mean\")\ndfTypeSE <- aggregate(RATING ~ AGE*TYPE, data=dfLong, FUN = \"sd\")/sqrt(nIDs)\n\ndfMemoryTypeMeans <- aggregate(RATING ~ MEMORY*TYPE, data=dfLong, FUN = \"mean\")\ndfMemoryTypeSE <- aggregate(RATING ~ MEMORY*TYPE, data=dfLong, FUN = \"sd\")/sqrt(nIDs)\n\n\ndfTypeGenderMeans <- aggregate(RATING ~ AGE*TYPE*GENDER, data=dfLong, FUN = \"mean\")\ndfTypeGenderSE <- aggregate(RATING ~ AGE*TYPE*GENDER, data=dfLong, FUN = \"sd\")/sqrt(nIDs)\n\n# ggplot(data=dfTypeMeans[!dfTypeMeans$TYPE %in% c(\"arousal\",\"pleasure\"),],aes(AGE,RATING,group=TYPE,color=TYPE)) + geom_line()\n\n\ndfTypeErrBar <- cbind(dfTypeMeans,dfTypeMeans$RATING + dfTypeSE$RATING,dfTypeMeans$RATING - dfTypeSE$RATING)\n\ncolnames(dfTypeErrBar) <- c(\"AGE\",\"TYPE\",\"RATING\",\"upper\",\"lower\")\n\n\ndfMemoryTypeErrBar <- cbind(dfMemoryTypeMeans,dfMemoryTypeMeans$RATING + dfMemoryTypeSE$RATING,dfMemoryTypeMeans$RATING - dfMemoryTypeSE$RATING)\n\ncolnames(dfMemoryTypeErrBar) <- c(\"MEMORY\",\"TYPE\",\"RATING\",\"upper\",\"lower\")\n\n\n\ndfTypeGenderErrBar <- cbind(dfTypeGenderMeans,dfTypeGenderMeans$RATING + dfTypeGenderSE$RATING,dfTypeGenderMeans$RATING - dfTypeGenderSE$RATING)\n\ncolnames(dfTypeGenderErrBar) <- c(\"AGE\",\"TYPE\",\"GENDER\",\"RATING\",\"upper\",\"lower\")\n\n\n\npTypeErrorBar <- ggplot(data=dfTypeErrBar[!dfTypeErrBar$TYPE %in% c(\"arousal\",\"pleasure\",\"elements\"),],aes(AGE,RATING,group=TYPE,color=TYPE)) + geom_errorbar(data=dfTypeErrBar[!dfTypeErrBar$TYPE %in% c(\"arousal\",\"pleasure\",\"elements\"),],mapping = aes(ymin=lower,ymax=upper),width=.1) + geom_line()\n\n\npMemoryTypeErrorBar <- ggplot(data=dfMemoryTypeErrBar[!dfMemoryTypeErrBar$TYPE %in% c(\"arousal\",\"pleasure\",\"elements\"),],aes(MEMORY,RATING,group=TYPE,color=TYPE)) + geom_errorbar(data=dfMemoryTypeErrBar[!dfMemoryTypeErrBar$TYPE %in% c(\"arousal\",\"pleasure\",\"elements\"),],mapping = aes(ymin=lower,ymax=upper),width=.1) + geom_line()\n\n\n\n\npTypeGenderPleasureErrorBar <- ggplot(data=dfTypeGenderErrBar[dfTypeGenderErrBar$TYPE==\"pleasure\",],aes(AGE,RATING,group=GENDER,color=GENDER)) + geom_errorbar(data=dfTypeGenderErrBar[dfTypeGenderErrBar$TYPE==\"pleasure\",],mapping = aes(ymin=lower,ymax=upper),width=.1) + geom_line(size=2) + geom_point(size=3) + labs(title= \"Pleasure (1 = misery, 7 = pleasure)\")\n\n#########################################\nsvg(\n  paste0(plotDir,'PLEASURE_bY_AGE_and_GENDER.svg')\n)\nprint(pTypeGenderPleasureErrorBar)\ndev.off()\n#########################################\n\n\n\n\n\npTypeGenderArousalErrorBar <- ggplot(data=dfTypeGenderErrBar[dfTypeGenderErrBar$TYPE==\"arousal\",],aes(AGE,RATING,group=GENDER,color=GENDER)) + geom_errorbar(data=dfTypeGenderErrBar[dfTypeGenderErrBar$TYPE==\"arousal\",],mapping = aes(ymin=lower,ymax=upper),width=.1) + geom_line(size=2) + geom_point(size=3) + labs(title=\"Arousal(emotional intensity) ratings (scale = 1 to 7)\")\n\n#########################################\nsvg(\n  paste0(plotDir,'AROUSAL_bY_AGE_and_GENDER.svg')\n)\nprint(pTypeGenderArousalErrorBar)\ndev.off()\n#########################################\n\n\n\n\npTypeGenderElementsErrorBar <- ggplot(data=dfTypeGenderErrBar[dfTypeGenderErrBar$TYPE==\"elements\",],aes(AGE,RATING,group=GENDER,color=GENDER)) + geom_errorbar(data=dfTypeGenderErrBar[dfTypeGenderErrBar$TYPE==\"elements\",],mapping = aes(ymin=lower,ymax=upper),width=.1) + geom_line(size=2) + geom_point(size=3) + labs(title=\"Number of distinct elements per memory\")\n\n#########################################\nsvg(\n  paste0(plotDir,'ELEMENTS_bY_AGE_and_GENDER.svg')\n)\nprint(pTypeGenderElementsErrorBar)\ndev.off()\n#########################################\n\n\n\n\npElementsErrorBar <- ggplot(data=dfTypeErrBar[dfTypeErrBar$TYPE==\"elements\",],aes(AGE,RATING)) +\n  geom_errorbar(data=dfTypeErrBar[dfTypeErrBar$TYPE==\"elements\",],mapping = aes(ymin=lower,ymax=upper),width=.1) +\n  geom_line(size=2) +\n  geom_point(size=3) +\n  labs(\n    y=\"Number of elements per memory\"\n    )\n\n# pMemoryElementsErrorBar <- ggplot(data=dfMemoryTypeErrBar[dfMemoryTypeErrBar$TYPE==\"elements\",],aes(MEMORY,RATING)) + geom_errorbar(data=dfMemoryTypeErrBar[dfMemoryTypeErrBar$TYPE==\"elements\",],mapping = aes(ymin=lower,ymax=upper),width=.1) + geom_line()\n\n\n#########################################\nsvg(\n  paste0(plotDir,'elements_by_AGE.svg')\n)\nprint(pElementsErrorBar)\ndev.off()\n#########################################\n\n\n\n\n\n\npPleasureErrorBar <- ggplot(data=dfTypeErrBar[dfTypeErrBar$TYPE==\"pleasure\",],aes(AGE,RATING)) +\n  geom_errorbar(data=dfTypeErrBar[dfTypeErrBar$TYPE==\"pleasure\",],mapping = aes(ymin=lower,ymax=upper),width=.1) +\n  geom_line(size=2) +\n  geom_point(size=3) +\n  labs(\n    title=\"Pleasure (1 = misery, 7 = pleasure)\"\n  )\n\n#########################################\nsvg(\n  paste0(plotDir,'pleasure_by_AGE.svg')\n)\nprint(pPleasureErrorBar)\ndev.off()\n#########################################\n\n\n\npArousalErrorBar <- ggplot(data=dfTypeErrBar[dfTypeErrBar$TYPE==\"arousal\",],aes(AGE,RATING)) +\n  geom_errorbar(data=dfTypeErrBar[dfTypeErrBar$TYPE==\"arousal\",],mapping = aes(ymin=lower,ymax=upper),width=.1) +\n  geom_line(size=2) +\n  geom_point(size=3) +\n  labs(\n    title=\"Arousal(emotional intensity) ratings (scale = 1 to 7)\"\n  )\n\n#########################################\nsvg(\n  paste0(plotDir,'arousal_by_AGE.svg')\n)\nprint(pArousalErrorBar)\ndev.off()\n#########################################\n\n\n\n\n\n\n#######################\n# Mean ratings by TYPE\n#######################\n\ndfRatingByTypeByID <- aggregate(RATING ~ TYPE*ID, data=dfLong[!dfLong$TYPE %in% c(\"arousal\",\"pleasure\",\"elements\"),], FUN=\"mean\")\n\ndfRatingByTypeMean <- aggregate(RATING ~ TYPE, data=dfRatingByTypeByID, FUN=\"mean\")\ndfRatingByTypeSE <- aggregate(RATING ~ TYPE, data=dfRatingByTypeByID, FUN=\"sd\")\ndfRatingByTypeSE$RATING <- dfRatingByTypeSE$RATING/sqrt(nIDs)\n\n# Order TYPE levels by mean rating\ndfRatingByTypeMean$TYPE <- reorder(dfRatingByTypeMean$TYPE,dfRatingByTypeMean$RATING)\ndfRatingByTypeSE$TYPE <- reorder(dfRatingByTypeSE$TYPE,dfRatingByTypeMean$RATING)\n\n\ndfRatingByTypeErrBar <- cbind(dfRatingByTypeMean,dfRatingByTypeMean$RATING + dfRatingByTypeSE$RATING,dfRatingByTypeMean$RATING - dfRatingByTypeSE$RATING)\n\ncolnames(dfRatingByTypeErrBar) <- c(\"TYPE\",\"RATING\",\"upper\",\"lower\")\n\npRatingByTypeErrorBar <- ggplot(data=dfRatingByTypeErrBar[!dfRatingByTypeErrBar$TYPE %in% c(\"arousal\",\"pleasure\",\"elements\"),],aes(TYPE,RATING)) + geom_errorbar(data=dfRatingByTypeErrBar[!dfRatingByTypeErrBar$TYPE %in% c(\"arousal\",\"pleasure\",\"elements\"),],mapping = aes(ymin=lower,ymax=upper),width=.1) + geom_point(size = 3) + labs(title=\"Number of distinct elements per memory by type\")\n\n#########################################\nsvg(\n  paste0(plotDir,'TYPE_mean_ratings.svg')\n)\nprint(pRatingByTypeErrorBar)\ndev.off()\n#########################################\n\n\n\n\n##############################################\n# Correlations of different TYPEs of ratings\n#   and their changes across AGE\n##############################################\n\n\nuniqueAges <- sort(unique(AGE))\n\ncorrArr <- array(NA, c(11,11,length(uniqueAges)))\n\nfor (ii in 1:length(uniqueAges)){\n  corrArr[,,ii] <- rcorr(\n    as.matrix(df[AGE == uniqueAges[ii],c(3:12,16)])\n  )$r\n}\n\ndimnames(corrArr)[[1]] <- colnames(df[,c(3:12,16)])\ndimnames(corrArr)[[2]] <- colnames(df[,c(3:12,16)])\ndimnames(corrArr)[[3]] <- uniqueAges\n\n\n# dfPleasureElementsCorr <- as.data.frame(as.table(corrArr[1,10,]))\n# colnames(dfPleasureElementsCorr) <- c(\"AGE\",\"PleasureElements_r\")\n#\n# dfArousalElementsCorr <- as.data.frame(as.table(corrArr[2,10,]))\n# colnames(dfArousalElementsCorr) <- c(\"AGE\",\"ArousalElements_r\")\n\n\n\ndfPleasureCorr <- as.data.frame(as.table(corrArr[1,3:10,]))\ncolnames(dfPleasureCorr) <- c(\"TYPE\",\"AGE\",\"r\")\n\ndfArousalCorr <- as.data.frame(as.table(corrArr[2,3:10,]))\ncolnames(dfArousalCorr) <- c(\"TYPE\",\"AGE\",\"r\")\n\ndfPlacesCorr <- as.data.frame(as.table(corrArr[7,c(3,4,5,6,8,9,10),]))\ncolnames(dfPlacesCorr) <- c(\"TYPE\",\"AGE\",\"r\")\n\ndfThingsCorr <- as.data.frame(as.table(corrArr[8,c(3,4,5,6,7,9,10),]))\ncolnames(dfThingsCorr) <- c(\"TYPE\",\"AGE\",\"r\")\n\ndfPeopleCorr <- as.data.frame(as.table(corrArr[6,c(3,4,5,7,8,9,10),]))\ncolnames(dfPeopleCorr) <- c(\"TYPE\",\"AGE\",\"r\")\n\ndfContextsCorr <- as.data.frame(as.table(corrArr[3,c(4,5,6,7,8,9,10),]))\ncolnames(dfContextsCorr) <- c(\"TYPE\",\"AGE\",\"r\")\n\ndfEpisodesCorr <- as.data.frame(as.table(corrArr[4,c(3,5,6,7,8,9,10),]))\ncolnames(dfEpisodesCorr) <- c(\"TYPE\",\"AGE\",\"r\")\n\ndfTimesCorr <- as.data.frame(as.table(corrArr[9,c(3,4,5,6,7,8,10),]))\ncolnames(dfTimesCorr) <- c(\"TYPE\",\"AGE\",\"r\")\n\ndfFeelingsCorr <- as.data.frame(as.table(corrArr[5,c(3,4,6,7,8,9,10),]))\ncolnames(dfFeelingsCorr) <- c(\"TYPE\",\"AGE\",\"r\")\n\ndfDetailsCorr <- as.data.frame(as.table(corrArr[10,c(3:9),]))\ncolnames(dfDetailsCorr) <- c(\"TYPE\",\"AGE\",\"r\")\n\n\n# pPleasureElementsCorr <- ggplot(data=dfPleasureElementsCorr,aes(AGE,PleasureElements_r)) + geom_point()\n#\n# pArousalElementsCorr <- ggplot(data=dfArousalElementsCorr,aes(AGE,ArousalElements_r)) + geom_point()\n\n\n\npPleasureCorr <-  ggplot(data=dfPleasureCorr,aes(AGE,r,group=TYPE,color=TYPE)) + geom_line()\n\npArousalCorr <- ggplot(data=dfArousalCorr,aes(AGE,r,group=TYPE,color=TYPE)) + geom_line()\n\npPlacesCorr <- ggplot(data=dfPlacesCorr,aes(AGE,r,group=TYPE,color=TYPE)) + geom_line()\n\npThingsCorr <- ggplot(data=dfThingsCorr,aes(AGE,r,group=TYPE,color=TYPE)) + geom_line()\n\npPeopleCorr <- ggplot(data=dfPeopleCorr,aes(AGE,r,group=TYPE,color=TYPE)) + geom_line()\n\npContextsCorr <- ggplot(data=dfContextsCorr,aes(AGE,r,group=TYPE,color=TYPE)) + geom_line()\n\npEpisodesCorr <- ggplot(data=dfEpisodesCorr,aes(AGE,r,group=TYPE,color=TYPE)) + geom_line()\n\npTimesCorr <- ggplot(data=dfTimesCorr,aes(AGE,r,group=TYPE,color=TYPE)) + geom_line()\n\npFeelingsCorr <- ggplot(data=dfFeelingsCorr,aes(AGE,r,group=TYPE,color=TYPE)) + geom_line()\n\npDetailsCorr <- ggplot(data=dfDetailsCorr,aes(AGE,r,group=TYPE,color=TYPE)) + geom_line()\n\n\n# Set by hand after viewing data\ncommonYLim <- c(-.1,.4)\n\npPlacesMeanCorr <- ggplot(aggregate(data=dfPlacesCorr,r ~ AGE, FUN=\"mean\"),aes(AGE,r,group=1)) + geom_line() + geom_point() + ylim(commonYLim) + labs(title=\"PLACES\") + labs(y = \"mean r\")\n\npThingsMeanCorr <- ggplot(aggregate(data=dfThingsCorr,r ~ AGE, FUN=\"mean\"),aes(AGE,r,group=1)) + geom_line() + geom_point() + ylim(commonYLim) + labs(title=\"THINGS\")\n\npPeopleMeanCorr <- ggplot(aggregate(data=dfPeopleCorr,r ~ AGE, FUN=\"mean\"),aes(AGE,r,group=1)) + geom_line() + geom_point() + ylim(commonYLim) + labs(title=\"PEOPLE\")\n\npContextsMeanCorr <- ggplot(aggregate(data=dfContextsCorr,r ~ AGE, FUN=\"mean\"),aes(AGE,r,group=1)) + geom_line() + geom_point() + ylim(commonYLim) + labs(title=\"CONTEXTS\")\n\npEpisodesMeanCorr <- ggplot(aggregate(data=dfEpisodesCorr,r ~ AGE, FUN=\"mean\"),aes(AGE,r,group=1)) + geom_line() + geom_point() + ylim(commonYLim) + labs(title=\"EPISODES\")\n\npTimesMeanCorr <- ggplot(aggregate(data=dfTimesCorr,r ~ AGE, FUN=\"mean\"),aes(AGE,r,group=1)) + geom_line() + geom_point() + ylim(commonYLim) + labs(title=\"TIMES\")\n\npFeelingsMeanCorr <- ggplot(aggregate(data=dfFeelingsCorr,r ~ AGE, FUN=\"mean\"),aes(AGE,r,group=1)) + geom_line() + geom_point() + ylim(commonYLim) + labs(title=\"FEELINGS\")\n\npDetailsMeanCorr <- ggplot(aggregate(data=dfDetailsCorr,r ~ AGE, FUN=\"mean\"),aes(AGE,r,group=1)) + geom_line() + geom_point() + ylim(commonYLim) + labs(title=\"DETAILS\")\n\n###############################################\nsvg(\n  paste0(plotDir,'TYPE_mean_correlations.svg'),\n  width = 16, # this is in inches\n  height = 3\n)\ngrid.arrange(grobs = list(pPlacesMeanCorr,pPeopleMeanCorr,pThingsMeanCorr,pContextsMeanCorr,pEpisodesMeanCorr,pTimesMeanCorr,pFeelingsMeanCorr,pDetailsMeanCorr),nrow=1)\ndev.off()\n###############################################\n\n###############\n###############\n# ANOVAs\n###############\n###############\n\n\n########################################\n# One-way ANOVAs of AGE and TYPE levels\n#   and two-way interaction\n########################################\n\n# NOTE: don't actually need RM here because dfLong is one mean per cell per sub (\"ID\")\n\nsummary(aov(data=dfLong[!dfLong$TYPE %in% c(\"arousal\",\"pleasure\",\"elements\"),],RATING ~ factor(AGE) + Error(1/ID)))\n\nsummary(aov(data=dfLong[!dfLong$TYPE %in% c(\"arousal\",\"pleasure\",\"elements\"),],RATING ~ TYPE))\n\n# Currently shows no interaction.  Hmm.\nsummary(aov(data=dfLong[!dfLong$TYPE %in% c(\"arousal\",\"pleasure\",\"elements\"),],RATING ~ factor(AGE)*TYPE + Error(1/ID)))\n\n\n#########################################\n# Post-hoc tests for above 2-way ANOVA\n#########################################\n\n# Currently shows p<0.05 age 12<10; significantly more elements recalled for 10-yr-old memories than 12.\nTukeyHSD(aov(data=dfLong[!dfLong$TYPE %in% c(\"arousal\",\"pleasure\",\"elements\"),],RATING ~ factor(AGE)))\n\n\n#####################\n#####################\n# Corr. p-vals\n#  Between specific D.V.s\n#####################\n#####################\n\n\ncorrMat <- rcorr(as.matrix(df[,3:12]))\n\n# For checking specific values\n# corrMat$r\n# corrMat$n\n# corrMat$P\n\n\n\n# Not quite significant, weak positive\nrcorr(df$PLEASURE,df$ELEMENTS)\n\n# Positive, extremely significant\nrcorr(df$AROUSAL,df$ELEMENTS)\n\n\n\n################################################\n# Heatmap of correlations among levels of TYPE\n################################################\n\n\n#########################################\nsvg(\n  paste0(plotDir,'TYPE_correlation_matrix.svg')\n)\n# Can't save output to var. and print\nheatmap(cor(na.omit(df[,5:12])),symm=TRUE,col=brewer.pal(8,\"YlOrRd\"))\ndev.off()\n#########################################\n\n\n\n\n\n\n############################################################\n############################################################\n############################################################\n\nstop()\n\n######################################\n# Unused code,\n#   maybe useful for something else\n######################################\n\naov_PLACES = ezANOVA(\n  data = na.omit(df)\n  , dv = .(PLACES)\n  , wid = .(ID)\n  , within = .(AGE)\n  , within_full = .(AGE)\n)\n\nprint(aov_PLACES)\n\nx_PLACES <- ezMixed(\n  data = na.omit(df)\n  , dv = .(PLACES)\n  , random = .(ID)\n  , fixed = .(AGE)\n)\n",
    "created" : 1569538105863.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2012388440",
    "id" : "292D7FD4",
    "lastKnownWriteTime" : 1570371455,
    "last_content_update" : 1570371455503,
    "path" : "~/Google Drive/teaching/CogPsych/Cog_2019/in-class/ic04_autobiographical/code/autobiographical.R",
    "project_path" : "autobiographical.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}